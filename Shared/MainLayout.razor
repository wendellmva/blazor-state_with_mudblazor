@using BlazorApp1.Features.Apps
@inherits BlazorLayoutComponentBase

<MudLayout>
    <MudAppBar Elevation="1" Dense="true">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.End" OnClick="@DrawerStartToggle" />
        <MudSpacer />
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@DrawerEndToggle" />
    </MudAppBar>
    <MudDrawer @bind-Open="@_drawerStart" Width="300px" ClipMode="DrawerClipMode.Never" Anchor="Anchor.Start" Elevation="1" Variant="@DrawerVariant.Persistent">
        <MudDrawerHeader>
            <MudText Typo="Typo.h6">My Example App</MudText>
        </MudDrawerHeader>
        <NavMenu/>
    </MudDrawer>
    <MudDrawer Open="@DrawerEnd" Width="300px" ClipMode="DrawerClipMode.Never" Anchor="Anchor.End" Elevation="1" Variant="@DrawerVariant.Persistent">
        <MudDrawerHeader>
            <MudText Typo="Typo.h6">Settings</MudText>
        </MudDrawerHeader>
        @if (DrawerComponent is not null)
        {
            <DynamicComponent Type="@DrawerComponent" />
        }
    </MudDrawer>
    <MudMainContent Class="pt-8 px-1">
        <MudContainer Class="mt-6 mb-16">
            @Body
        </MudContainer>
    </MudMainContent>
</MudLayout>

@code {
    bool _drawerStart = true;
    
    public AppState AppState => Store.GetState<AppState>();

    private bool DrawerEnd => AppState.DrawerEnd;

    public Type? DrawerComponent => AppState.DrawerComponent;

    void DrawerStartToggle()
    {
        _drawerStart = !_drawerStart;
    }

    private async Task DrawerEndToggle()
    {
        await Mediator.Send(new AppState.ToggleDrawerEndAction { DrawerEnd = !DrawerEnd });
    }


}